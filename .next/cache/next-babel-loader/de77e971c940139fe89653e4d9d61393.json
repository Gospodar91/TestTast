{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nimport remark from 'remark';\nimport html from 'remark-html';\nvar postsDirectory = path.join(process.cwd(), 'posts');\nexport function getSortedPostsData() {\n  // Get file names under /posts\n  var fileNames = fs.readdirSync(postsDirectory);\n  var allPostsData = fileNames.map(function (fileName) {\n    // Remove \".md\" from file name to get id\n    var id = fileName.replace(/\\.md$/, ''); // Read markdown file as string\n\n    var fullPath = path.join(postsDirectory, fileName);\n    var fileContents = fs.readFileSync(fullPath, 'utf8'); // Use gray-matter to parse the post metadata section\n\n    var matterResult = matter(fileContents); // Combine the data with the id\n\n    return _objectSpread({\n      id: id\n    }, matterResult.data);\n  }); // Sort posts by date\n\n  return allPostsData.sort(function (a, b) {\n    if (a.date < b.date) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n}\nexport function getAllPostIds() {\n  var fileNames = fs.readdirSync(postsDirectory); // Returns an array that looks like this:\n  // [\n  //   {\n  //     params: {\n  //       id: 'ssg-ssr'\n  //     }\n  //   },\n  //   {\n  //     params: {\n  //       id: 'pre-rendering'\n  //     }\n  //   }\n  // ]\n\n  return fileNames.map(function (fileName) {\n    return {\n      params: {\n        id: fileName.replace(/\\.md$/, '')\n      }\n    };\n  });\n}\nexport function getPostData(id) {\n  var fullPath = path.join(postsDirectory, \"\".concat(id, \".md\"));\n  var fileContents = fs.readFileSync(fullPath, 'utf8'); // Use gray-matter to parse the post metadata section\n\n  var matterResult = matter(fileContents); // Combine the data with the id\n\n  return _objectSpread({\n    id: id\n  }, matterResult.data);\n}\nexport function getStaticProps(_x) {\n  return _getStaticProps.apply(this, arguments);\n}\n\nfunction _getStaticProps() {\n  _getStaticProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var params, postData;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            params = _ref.params;\n            _context.next = 3;\n            return getPostData(params.id);\n\n          case 3:\n            postData = _context.sent;\n            console.log('padadarams', params); // ...\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getStaticProps.apply(this, arguments);\n}","map":{"version":3,"sources":["E:/TestTaskNextJs/testDevOps/TestTast/nextjs-blog/lib/posts.js"],"names":["fs","path","matter","remark","html","postsDirectory","join","process","cwd","getSortedPostsData","fileNames","readdirSync","allPostsData","map","fileName","id","replace","fullPath","fileContents","readFileSync","matterResult","data","sort","a","b","date","getAllPostIds","params","getPostData","getStaticProps","postData","console","log"],"mappings":";;;;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAIA,IAAMC,cAAc,GAAGJ,IAAI,CAACK,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,OAAzB,CAAvB;AAGA,OAAO,SAASC,kBAAT,GAA8B;AACnC;AACA,MAAMC,SAAS,GAAGV,EAAE,CAACW,WAAH,CAAeN,cAAf,CAAlB;AACA,MAAMO,YAAY,GAAGF,SAAS,CAACG,GAAV,CAAc,UAAAC,QAAQ,EAAI;AAC7C;AACA,QAAMC,EAAE,GAAGD,QAAQ,CAACE,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAAX,CAF6C,CAI7C;;AACA,QAAMC,QAAQ,GAAGhB,IAAI,CAACK,IAAL,CAAUD,cAAV,EAA0BS,QAA1B,CAAjB;AACA,QAAMI,YAAY,GAAGlB,EAAE,CAACmB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB,CAN6C,CAQ7C;;AACA,QAAMG,YAAY,GAAGlB,MAAM,CAACgB,YAAD,CAA3B,CAT6C,CAW7C;;AACA;AACEH,MAAAA,EAAE,EAAFA;AADF,OAEKK,YAAY,CAACC,IAFlB;AAID,GAhBoB,CAArB,CAHmC,CAoBnC;;AACA,SAAOT,YAAY,CAACU,IAAb,CAAkB,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACjC,QAAID,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAf,EAAqB;AACnB,aAAO,CAAP;AACD,KAFD,MAEO;AACL,aAAO,CAAC,CAAR;AACD;AACF,GANM,CAAP;AAOD;AACD,OAAO,SAASC,aAAT,GAAyB;AAC5B,MAAMhB,SAAS,GAAGV,EAAE,CAACW,WAAH,CAAeN,cAAf,CAAlB,CAD4B,CAG5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAOK,SAAS,CAACG,GAAV,CAAc,UAAAC,QAAQ,EAAI;AAC/B,WAAO;AACLa,MAAAA,MAAM,EAAE;AACNZ,QAAAA,EAAE,EAAED,QAAQ,CAACE,OAAT,CAAiB,OAAjB,EAA0B,EAA1B;AADE;AADH,KAAP;AAKD,GANM,CAAP;AAOD;AACD,OAAO,SAASY,WAAT,CAAqBb,EAArB,EAAyB;AAC9B,MAAME,QAAQ,GAAGhB,IAAI,CAACK,IAAL,CAAUD,cAAV,YAA6BU,EAA7B,SAAjB;AACA,MAAMG,YAAY,GAAGlB,EAAE,CAACmB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB,CAF8B,CAI9B;;AACA,MAAMG,YAAY,GAAGlB,MAAM,CAACgB,YAAD,CAA3B,CAL8B,CAO9B;;AACA;AACEH,IAAAA,EAAE,EAAFA;AADF,KAEKK,YAAY,CAACC,IAFlB;AAID;AAED,gBAAsBQ,cAAtB;AAAA;AAAA;;;6EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgCF,YAAAA,MAAhC,QAAgCA,MAAhC;AAAA;AAAA,mBAEkBC,WAAW,CAACD,MAAM,CAACZ,EAAR,CAF7B;;AAAA;AAECe,YAAAA,QAFD;AAGLC,YAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BL,MAA1B,EAHK,CAIL;;AAJK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import fs from 'fs'\r\nimport path from 'path'\r\nimport matter from 'gray-matter'\r\nimport remark from 'remark'\r\nimport html from 'remark-html'\r\n\r\n\r\n\r\nconst postsDirectory = path.join(process.cwd(), 'posts')\r\n\r\n\r\nexport function getSortedPostsData() {\r\n  // Get file names under /posts\r\n  const fileNames = fs.readdirSync(postsDirectory)\r\n  const allPostsData = fileNames.map(fileName => {\r\n    // Remove \".md\" from file name to get id\r\n    const id = fileName.replace(/\\.md$/, '')\r\n\r\n    // Read markdown file as string\r\n    const fullPath = path.join(postsDirectory, fileName)\r\n    const fileContents = fs.readFileSync(fullPath, 'utf8')\r\n\r\n    // Use gray-matter to parse the post metadata section\r\n    const matterResult = matter(fileContents)\r\n\r\n    // Combine the data with the id\r\n    return {\r\n      id,\r\n      ...matterResult.data\r\n    }\r\n  })\r\n  // Sort posts by date\r\n  return allPostsData.sort((a, b) => {\r\n    if (a.date < b.date) {\r\n      return 1\r\n    } else {\r\n      return -1\r\n    }\r\n  })\r\n}\r\nexport function getAllPostIds() {\r\n    const fileNames = fs.readdirSync(postsDirectory)\r\n  \r\n    // Returns an array that looks like this:\r\n    // [\r\n    //   {\r\n    //     params: {\r\n    //       id: 'ssg-ssr'\r\n    //     }\r\n    //   },\r\n    //   {\r\n    //     params: {\r\n    //       id: 'pre-rendering'\r\n    //     }\r\n    //   }\r\n    // ]\r\n    return fileNames.map(fileName => {\r\n      return {\r\n        params: {\r\n          id: fileName.replace(/\\.md$/, '')\r\n        }\r\n      }\r\n    })\r\n  }\r\n  export function getPostData(id) {\r\n    const fullPath = path.join(postsDirectory, `${id}.md`)\r\n    const fileContents = fs.readFileSync(fullPath, 'utf8')\r\n  \r\n    // Use gray-matter to parse the post metadata section\r\n    const matterResult = matter(fileContents)\r\n  \r\n    // Combine the data with the id\r\n    return {\r\n      id,\r\n      ...matterResult.data\r\n    }\r\n  }\r\n  \r\n  export async function getStaticProps({ params }) {\r\n    // Add the \"await\" keyword like this:\r\n    const postData = await getPostData(params.id)\r\n    console.log('padadarams', params)\r\n    // ...\r\n  }"]},"metadata":{},"sourceType":"module"}
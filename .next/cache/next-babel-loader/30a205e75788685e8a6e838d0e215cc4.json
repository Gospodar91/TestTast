{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nimport remark from 'remark';\nimport html from 'remark-html'; // const postsDirectory = path.join(process.cwd(), 'posts')\n\nexport function getSortedPostsData() {\n  return _getSortedPostsData.apply(this, arguments);\n} // //   Get file names under /posts\n//   const fileNames = fs.readdirSync(postsDirectory)\n//   const allPostsData = fileNames.map(fileName => {\n//     // Remove \".md\" from file name to get id\n//     const id = fileName.replace(/\\.md$/, '')\n//     // Read markdown file as string\n//     const fullPath = path.join(postsDirectory, fileName)\n//     const fileContents = fs.readFileSync(fullPath, 'utf8')\n//     // Use gray-matter to parse the post metadata section\n//     const matterResult = matter(fileContents)\n//     // Combine the data with the id\n//     return {\n//       id,\n//       ...matterResult.data\n//     }\n//   })\n// //   Sort posts by date\n//   return allPostsData.sort((a, b) => {\n//     if (a.date < b.date) {\n//       return 1\n//     } else {\n//       return -1\n//     }\n//   })\n// }\n// export function getAllPostIds() {\n//     const fileNames = fs.readdirSync(postsDirectory)\n//     return fileNames.map(fileName => {\n//       return {\n//         params: {\n//           id: fileName.replace(/\\.md$/, '')\n//         }\n//       }\n//     })\n//   }\n\nfunction _getSortedPostsData() {\n  _getSortedPostsData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var res, posts;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch('https://simple-blog-api.crew.red/posts');\n\n          case 2:\n            res = _context.sent;\n            _context.next = 5;\n            return res.json();\n\n          case 5:\n            posts = _context.sent;\n            return _context.abrupt(\"return\", posts.map(function (post) {\n              return {\n                params: _objectSpread({\n                  id: post.id.toString()\n                }, post)\n              };\n            }));\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getSortedPostsData.apply(this, arguments);\n}\n\nexport function getAllPostIds() {\n  return _getAllPostIds.apply(this, arguments);\n}\n\nfunction _getAllPostIds() {\n  _getAllPostIds = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var res, posts;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return fetch('https://simple-blog-api.crew.red/posts');\n\n          case 2:\n            res = _context2.sent;\n            _context2.next = 5;\n            return res.json();\n\n          case 5:\n            posts = _context2.sent;\n            return _context2.abrupt(\"return\", posts.map(function (post) {\n              return {\n                params: {\n                  id: post.id.toString()\n                }\n              };\n            }));\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getAllPostIds.apply(this, arguments);\n}\n\nexport function getPostData(_x) {\n  return _getPostData.apply(this, arguments);\n} //   const fullPath = path.join(postsDirectory, `${id}.md`)\n//   const fileContents = fs.readFileSync(fullPath, 'utf8')\n//   // Use gray-matter to parse the post metadata section\n//   const matterResult = matter(fileContents)\n//   // Use remark to convert markdown into HTML string\n//   const processedContent = await remark()\n//     .use(html)\n//     .process(matterResult.content)\n//   const contentHtml = processedContent.toString()\n//   return {\n//     id,\n//     contentHtml,\n//     ...matterResult.data\n//   }\n// }\n\nfunction _getPostData() {\n  _getPostData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(id) {\n    var res, posts;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return fetch('https://simple-blog-api.crew.red/posts');\n\n          case 2:\n            res = _context3.sent;\n            _context3.next = 5;\n            return res.json();\n\n          case 5:\n            posts = _context3.sent;\n            return _context3.abrupt(\"return\", (console.log('post', posts), posts.map(function (post) {\n              return {\n                params: _objectSpread({\n                  id: post.id.toString()\n                }, post)\n              };\n            })));\n\n          case 7:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getPostData.apply(this, arguments);\n}","map":{"version":3,"sources":["E:/TestTaskNextJs/testDevOps/TestTast/nextjs-blog/lib/posts.js"],"names":["fs","path","matter","remark","html","getSortedPostsData","fetch","res","json","posts","map","post","params","id","toString","getAllPostIds","getPostData","console","log"],"mappings":";;;;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,aAAjB,C,CAIA;;AAGA,gBAAuBC,kBAAvB;AAAA;AAAA,C,CAoBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;iFA5DQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAGcC,KAAK,CAAC,wCAAD,CAHnB;;AAAA;AAGEC,YAAAA,GAHF;AAAA;AAAA,mBAIgBA,GAAG,CAACC,IAAJ,EAJhB;;AAAA;AAIEC,YAAAA,KAJF;AAAA,6CAKOA,KAAK,CAACC,GAAN,CAAU,UAAAC,IAAI,EAAI;AAC3B,qBAAO;AAELC,gBAAAA,MAAM;AACJC,kBAAAA,EAAE,EAAEF,IAAI,CAACE,EAAL,CAAQC,QAAR;AADA,mBAEFH,IAFE;AAFD,eAAP;AAOD,aARU,CALP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AA8DN,gBAAsBI,aAAtB;AAAA;AAAA;;;4EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAGaT,KAAK,CAAC,wCAAD,CAHlB;;AAAA;AAGCC,YAAAA,GAHD;AAAA;AAAA,mBAIeA,GAAG,CAACC,IAAJ,EAJf;;AAAA;AAICC,YAAAA,KAJD;AAAA,8CAKMA,KAAK,CAACC,GAAN,CAAU,UAAAC,IAAI,EAAI;AAC3B,qBAAO;AAELC,gBAAAA,MAAM,EAAE;AACNC,kBAAAA,EAAE,EAAEF,IAAI,CAACE,EAAL,CAAQC,QAAR;AADE;AAFH,eAAP;AAMD,aAPU,CALN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAiBT,gBAAsBE,WAAtB;AAAA;AAAA,C,CAcA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;;;0EAhCO,kBAA2BH,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACeP,KAAK,CAAC,wCAAD,CADpB;;AAAA;AACGC,YAAAA,GADH;AAAA;AAAA,mBAEiBA,GAAG,CAACC,IAAJ,EAFjB;;AAAA;AAEGC,YAAAA,KAFH;AAAA,+CAGOQ,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBT,KAApB,GAA4BA,KAAK,CAACC,GAAN,CAAU,UAAAC,IAAI,EAAI;AACtD,qBAAO;AAELC,gBAAAA,MAAM;AACJC,kBAAAA,EAAE,EAAEF,IAAI,CAACE,EAAL,CAAQC,QAAR;AADA,mBAEDH,IAFC;AAFD,eAAP;AAOD,aARqC,CAHnC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import fs from 'fs'\r\nimport path from 'path'\r\nimport matter from 'gray-matter'\r\nimport remark from 'remark'\r\nimport html from 'remark-html'\r\n\r\n\r\n\r\n// const postsDirectory = path.join(process.cwd(), 'posts')\r\n\r\n\r\nexport  async function getSortedPostsData() {\r\n\r\n\r\n    const res = await fetch('https://simple-blog-api.crew.red/posts')\r\n    const posts = await res.json()\r\n    return (   posts.map(post => {\r\n      return {\r\n         \r\n        params: {\r\n          id: post.id.toString(),\r\n         ...post\r\n        }\r\n      }\r\n    }))\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// //   Get file names under /posts\r\n//   const fileNames = fs.readdirSync(postsDirectory)\r\n//   const allPostsData = fileNames.map(fileName => {\r\n//     // Remove \".md\" from file name to get id\r\n//     const id = fileName.replace(/\\.md$/, '')\r\n\r\n//     // Read markdown file as string\r\n//     const fullPath = path.join(postsDirectory, fileName)\r\n//     const fileContents = fs.readFileSync(fullPath, 'utf8')\r\n\r\n//     // Use gray-matter to parse the post metadata section\r\n//     const matterResult = matter(fileContents)\r\n\r\n//     // Combine the data with the id\r\n  \r\n//     return {\r\n//       id,\r\n//       ...matterResult.data\r\n//     }\r\n//   })\r\n// //   Sort posts by date\r\n//   return allPostsData.sort((a, b) => {\r\n//     if (a.date < b.date) {\r\n//       return 1\r\n//     } else {\r\n//       return -1\r\n//     }\r\n//   })\r\n// }\r\n// export function getAllPostIds() {\r\n//     const fileNames = fs.readdirSync(postsDirectory)\r\n  \r\n\r\n//     return fileNames.map(fileName => {\r\n//       return {\r\n//         params: {\r\n//           id: fileName.replace(/\\.md$/, '')\r\n//         }\r\n//       }\r\n//     })\r\n//   }\r\n\r\n  export async function getAllPostIds() {\r\n    // Instead of the file system,\r\n    // fetch post data from an external API endpoint\r\n    const res = await fetch('https://simple-blog-api.crew.red/posts')\r\n    const posts = await res.json()\r\n    return (   posts.map(post => {\r\n      return {\r\n         \r\n        params: {\r\n          id: post.id.toString()\r\n        }\r\n      }\r\n    }))\r\n  }\r\n\r\n\r\n\r\nexport async function getPostData(id) {\r\n    const res = await fetch('https://simple-blog-api.crew.red/posts')\r\n    const posts = await res.json()\r\n    return (  console.log('post', posts), posts.map(post => {\r\n      return {\r\n         \r\n        params: {\r\n          id: post.id.toString(),\r\n          ...post\r\n        }\r\n      }\r\n    }))\r\n}\r\n\r\n//   const fullPath = path.join(postsDirectory, `${id}.md`)\r\n//   const fileContents = fs.readFileSync(fullPath, 'utf8')\r\n\r\n//   // Use gray-matter to parse the post metadata section\r\n//   const matterResult = matter(fileContents)\r\n\r\n//   // Use remark to convert markdown into HTML string\r\n//   const processedContent = await remark()\r\n//     .use(html)\r\n//     .process(matterResult.content)\r\n//   const contentHtml = processedContent.toString()\r\n\r\n\r\n//   return {\r\n//     id,\r\n//     contentHtml,\r\n//     ...matterResult.data\r\n//   }\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nimport remark from 'remark';\nimport html from 'remark-html'; // const postsDirectory = path.join(process.cwd(), 'posts')\n\nexport async function getSortedPostsData() {\n  const res = await fetch('https://simple-blog-api.crew.red/posts');\n  const posts = await res.json();\n  return console.log('post', posts), posts.map(post => {\n    return {\n      params: {\n        id: post.id.toString(),\n        title: post.title.toString(),\n        body: post.body.toString()\n      }\n    };\n  });\n} // Get file names under /posts\n//   const fileNames = fs.readdirSync(postsDirectory)\n//   const allPostsData = fileNames.map(fileName => {\n//     // Remove \".md\" from file name to get id\n//     const id = fileName.replace(/\\.md$/, '')\n//     // Read markdown file as string\n//     const fullPath = path.join(postsDirectory, fileName)\n//     const fileContents = fs.readFileSync(fullPath, 'utf8')\n//     // Use gray-matter to parse the post metadata section\n//     const matterResult = matter(fileContents)\n// Combine the data with the id\n//     return {\n//       id,\n//       ...matterResult.data\n//     }\n//   })\n// Sort posts by date\n//   return allPostsData.sort((a, b) => {\n//     if (a.date < b.date) {\n//       return 1\n//     } else {\n//       return -1\n//     }\n//   })\n// }\n// export function getAllPostIds() {\n//     const fileNames = fs.readdirSync(postsDirectory)\n//     return fileNames.map(fileName => {\n//       return {\n//         params: {\n//           id: fileName.replace(/\\.md$/, '')\n//         }\n//       }\n//     })\n//   }\n//   export async function getAllPostIds() {\n//     // Instead of the file system,\n//     // fetch post data from an external API endpoint\n//     const res = await fetch('https://simple-blog-api.crew.red/posts')\n//     const posts = await res.json()\n//     return (   posts.map(post => {\n//       return {\n//         params: {\n//           id: post.id.toString()\n//         }\n//       }\n//     }))\n//   }\n\nexport async function getPostData(id) {\n  // const res = await fetch('https://simple-blog-api.crew.red/posts')\n  // const posts = await res.json()\n  // return (  console.log('post', posts), posts.map(post => {\n  //   return {\n  //     params: {\n  //       id: post.id.toString(),\n  //       title:post.title.toString(),\n  //       body:post.body.toString()\n  //     }\n  //   }\n  // }))\n  const fullPath = path.join(postsDirectory, `${id}.md`);\n  const fileContents = fs.readFileSync(fullPath, 'utf8'); // Use gray-matter to parse the post metadata section\n\n  const matterResult = matter(fileContents); // Use remark to convert markdown into HTML string\n\n  const processedContent = await remark().use(html).process(matterResult.content);\n  const contentHtml = processedContent.toString();\n  return _objectSpread({\n    id,\n    contentHtml\n  }, matterResult.data);\n}","map":{"version":3,"sources":["E:/TestTaskNextJs/testDevOps/TestTast/nextjs-blog/lib/posts.js"],"names":["fs","path","matter","remark","html","getSortedPostsData","res","fetch","posts","json","console","log","map","post","params","id","toString","title","body","getPostData","fullPath","join","postsDirectory","fileContents","readFileSync","matterResult","processedContent","use","process","content","contentHtml","data"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,aAAjB,C,CAIA;;AAGA,OAAS,eAAeC,kBAAf,GAAoC;AAGzC,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,wCAAD,CAAvB;AACA,QAAMC,KAAK,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAApB;AACA,SAAUC,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBH,KAApB,GAA4BA,KAAK,CAACI,GAAN,CAAUC,IAAI,IAAI;AACtD,WAAO;AAELC,MAAAA,MAAM,EAAE;AACNC,QAAAA,EAAE,EAAEF,IAAI,CAACE,EAAL,CAAQC,QAAR,EADE;AAENC,QAAAA,KAAK,EAACJ,IAAI,CAACI,KAAL,CAAWD,QAAX,EAFA;AAGNE,QAAAA,IAAI,EAACL,IAAI,CAACK,IAAL,CAAUF,QAAV;AAHC;AAFH,KAAP;AAQD,GATqC,CAAtC;AAUH,C,CAMC;AACF;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEI;AACJ;AACA;AACA;AACA;AACA;AACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA,OAAO,eAAeG,WAAf,CAA2BJ,EAA3B,EAA+B;AAClC;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGF,QAAMK,QAAQ,GAAGnB,IAAI,CAACoB,IAAL,CAAUC,cAAV,EAA2B,GAAEP,EAAG,KAAhC,CAAjB;AACA,QAAMQ,YAAY,GAAGvB,EAAE,CAACwB,YAAH,CAAgBJ,QAAhB,EAA0B,MAA1B,CAArB,CAhBoC,CAkBpC;;AACA,QAAMK,YAAY,GAAGvB,MAAM,CAACqB,YAAD,CAA3B,CAnBoC,CAqBpC;;AACA,QAAMG,gBAAgB,GAAG,MAAMvB,MAAM,GAClCwB,GAD4B,CACxBvB,IADwB,EAE5BwB,OAF4B,CAEpBH,YAAY,CAACI,OAFO,CAA/B;AAGA,QAAMC,WAAW,GAAGJ,gBAAgB,CAACV,QAAjB,EAApB;AAGA;AACED,IAAAA,EADF;AAEEe,IAAAA;AAFF,KAGKL,YAAY,CAACM,IAHlB;AAKD","sourcesContent":["import fs from 'fs'\r\nimport path from 'path'\r\nimport matter from 'gray-matter'\r\nimport remark from 'remark'\r\nimport html from 'remark-html'\r\n\r\n\r\n\r\n// const postsDirectory = path.join(process.cwd(), 'posts')\r\n\r\n\r\nexport   async function getSortedPostsData() {\r\n\r\n\r\n    const res = await fetch('https://simple-blog-api.crew.red/posts')\r\n    const posts = await res.json()\r\n    return (  console.log('post', posts), posts.map(post => {\r\n      return {\r\n         \r\n        params: {\r\n          id: post.id.toString(),\r\n          title:post.title.toString(),\r\n          body:post.body.toString()\r\n        }\r\n      }\r\n    }))\r\n}\r\n\r\n\r\n\r\n\r\n\r\n  // Get file names under /posts\r\n//   const fileNames = fs.readdirSync(postsDirectory)\r\n//   const allPostsData = fileNames.map(fileName => {\r\n//     // Remove \".md\" from file name to get id\r\n//     const id = fileName.replace(/\\.md$/, '')\r\n\r\n//     // Read markdown file as string\r\n//     const fullPath = path.join(postsDirectory, fileName)\r\n//     const fileContents = fs.readFileSync(fullPath, 'utf8')\r\n\r\n//     // Use gray-matter to parse the post metadata section\r\n//     const matterResult = matter(fileContents)\r\n\r\n    // Combine the data with the id\r\n//     return {\r\n//       id,\r\n//       ...matterResult.data\r\n//     }\r\n//   })\r\n  // Sort posts by date\r\n//   return allPostsData.sort((a, b) => {\r\n//     if (a.date < b.date) {\r\n//       return 1\r\n//     } else {\r\n//       return -1\r\n//     }\r\n//   })\r\n// }\r\n// export function getAllPostIds() {\r\n//     const fileNames = fs.readdirSync(postsDirectory)\r\n  \r\n\r\n//     return fileNames.map(fileName => {\r\n//       return {\r\n//         params: {\r\n//           id: fileName.replace(/\\.md$/, '')\r\n//         }\r\n//       }\r\n//     })\r\n//   }\r\n\r\n//   export async function getAllPostIds() {\r\n//     // Instead of the file system,\r\n//     // fetch post data from an external API endpoint\r\n//     const res = await fetch('https://simple-blog-api.crew.red/posts')\r\n//     const posts = await res.json()\r\n//     return (   posts.map(post => {\r\n//       return {\r\n         \r\n//         params: {\r\n//           id: post.id.toString()\r\n//         }\r\n//       }\r\n//     }))\r\n//   }\r\n\r\n\r\n\r\nexport async function getPostData(id) {\r\n    // const res = await fetch('https://simple-blog-api.crew.red/posts')\r\n    // const posts = await res.json()\r\n    // return (  console.log('post', posts), posts.map(post => {\r\n    //   return {\r\n         \r\n    //     params: {\r\n    //       id: post.id.toString(),\r\n    //       title:post.title.toString(),\r\n    //       body:post.body.toString()\r\n    //     }\r\n    //   }\r\n    // }))\r\n\r\n\r\n  const fullPath = path.join(postsDirectory, `${id}.md`)\r\n  const fileContents = fs.readFileSync(fullPath, 'utf8')\r\n\r\n  // Use gray-matter to parse the post metadata section\r\n  const matterResult = matter(fileContents)\r\n\r\n  // Use remark to convert markdown into HTML string\r\n  const processedContent = await remark()\r\n    .use(html)\r\n    .process(matterResult.content)\r\n  const contentHtml = processedContent.toString()\r\n\r\n\r\n  return {\r\n    id,\r\n    contentHtml,\r\n    ...matterResult.data\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
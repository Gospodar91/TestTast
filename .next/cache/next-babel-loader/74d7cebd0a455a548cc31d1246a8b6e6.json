{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nimport remark from 'remark';\nimport html from 'remark-html'; // const postsDirectory = path.join(process.cwd(), 'posts')\n\nexport function getSortedPostsData() {\n  //     const res = await fetch('https://simple-blog-api.crew.red/posts')\n  //     const posts = await res.json()\n  //     return (   posts.map(post => {\n  //       return {\n  //         params: {\n  //           id: post.id.toString(),\n  //           title:post.title.toString(),\n  //           body:post.body.toString()\n  //         }\n  //       }\n  //     }))\n  // }\n  //   Get file names under /posts\n  const fileNames = fs.readdirSync(postsDirectory);\n  const allPostsData = fileNames.map(fileName => {\n    // Remove \".md\" from file name to get id\n    const id = fileName.replace(/\\.md$/, ''); // Read markdown file as string\n\n    const fullPath = path.join(postsDirectory, fileName);\n    const fileContents = fs.readFileSync(fullPath, 'utf8'); // Use gray-matter to parse the post metadata section\n\n    const matterResult = matter(fileContents); // Combine the data with the id\n\n    return _objectSpread({\n      id\n    }, matterResult.data);\n  }); //   Sort posts by date\n\n  return allPostsData.sort((a, b) => {\n    if (a.date < b.date) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n} // export function getAllPostIds() {\n//     const fileNames = fs.readdirSync(postsDirectory)\n//     return fileNames.map(fileName => {\n//       return {\n//         params: {\n//           id: fileName.replace(/\\.md$/, '')\n//         }\n//       }\n//     })\n//   }\n\nexport async function getAllPostIds() {\n  // Instead of the file system,\n  // fetch post data from an external API endpoint\n  const res = await fetch('https://simple-blog-api.crew.red/posts');\n  const posts = await res.json();\n  return posts.map(post => {\n    return {\n      params: {\n        id: post.id.toString()\n      }\n    };\n  });\n}\nexport async function getPostData(id) {\n  const res = await fetch('https://simple-blog-api.crew.red/posts');\n  const posts = await res.json();\n  return console.log('post', posts), posts.map(post => {\n    return {\n      params: _objectSpread({\n        id: post.id.toString()\n      }, post)\n    };\n  });\n} //   const fullPath = path.join(postsDirectory, `${id}.md`)\n//   const fileContents = fs.readFileSync(fullPath, 'utf8')\n//   // Use gray-matter to parse the post metadata section\n//   const matterResult = matter(fileContents)\n//   // Use remark to convert markdown into HTML string\n//   const processedContent = await remark()\n//     .use(html)\n//     .process(matterResult.content)\n//   const contentHtml = processedContent.toString()\n//   return {\n//     id,\n//     contentHtml,\n//     ...matterResult.data\n//   }\n// }","map":{"version":3,"sources":["E:/TestTaskNextJs/testDevOps/TestTast/nextjs-blog/lib/posts.js"],"names":["fs","path","matter","remark","html","getSortedPostsData","fileNames","readdirSync","postsDirectory","allPostsData","map","fileName","id","replace","fullPath","join","fileContents","readFileSync","matterResult","data","sort","a","b","date","getAllPostIds","res","fetch","posts","json","post","params","toString","getPostData","console","log"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,aAAjB,C,CAIA;;AAGA,OAAS,SAASC,kBAAT,GAA8B;AAGvC;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACE,QAAMC,SAAS,GAAGN,EAAE,CAACO,WAAH,CAAeC,cAAf,CAAlB;AACA,QAAMC,YAAY,GAAGH,SAAS,CAACI,GAAV,CAAcC,QAAQ,IAAI;AAC7C;AACA,UAAMC,EAAE,GAAGD,QAAQ,CAACE,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAAX,CAF6C,CAI7C;;AACA,UAAMC,QAAQ,GAAGb,IAAI,CAACc,IAAL,CAAUP,cAAV,EAA0BG,QAA1B,CAAjB;AACA,UAAMK,YAAY,GAAGhB,EAAE,CAACiB,YAAH,CAAgBH,QAAhB,EAA0B,MAA1B,CAArB,CAN6C,CAQ7C;;AACA,UAAMI,YAAY,GAAGhB,MAAM,CAACc,YAAD,CAA3B,CAT6C,CAW7C;;AAEA;AACEJ,MAAAA;AADF,OAEKM,YAAY,CAACC,IAFlB;AAID,GAjBoB,CAArB,CAvBqC,CAyCvC;;AACE,SAAOV,YAAY,CAACW,IAAb,CAAkB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACjC,QAAID,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAf,EAAqB;AACnB,aAAO,CAAP;AACD,KAFD,MAEO;AACL,aAAO,CAAC,CAAR;AACD;AACF,GANM,CAAP;AAOD,C,CACD;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE,OAAO,eAAeC,aAAf,GAA+B;AACpC;AACA;AACA,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,wCAAD,CAAvB;AACA,QAAMC,KAAK,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAApB;AACA,SAAWD,KAAK,CAACjB,GAAN,CAAUmB,IAAI,IAAI;AAC3B,WAAO;AAELC,MAAAA,MAAM,EAAE;AACNlB,QAAAA,EAAE,EAAEiB,IAAI,CAACjB,EAAL,CAAQmB,QAAR;AADE;AAFH,KAAP;AAMD,GAPU,CAAX;AAQD;AAIH,OAAO,eAAeC,WAAf,CAA2BpB,EAA3B,EAA+B;AAClC,QAAMa,GAAG,GAAG,MAAMC,KAAK,CAAC,wCAAD,CAAvB;AACA,QAAMC,KAAK,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAApB;AACA,SAAUK,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBP,KAApB,GAA4BA,KAAK,CAACjB,GAAN,CAAUmB,IAAI,IAAI;AACtD,WAAO;AAELC,MAAAA,MAAM;AACJlB,QAAAA,EAAE,EAAEiB,IAAI,CAACjB,EAAL,CAAQmB,QAAR;AADA,SAEDF,IAFC;AAFD,KAAP;AAOD,GARqC,CAAtC;AASH,C,CAED;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import fs from 'fs'\r\nimport path from 'path'\r\nimport matter from 'gray-matter'\r\nimport remark from 'remark'\r\nimport html from 'remark-html'\r\n\r\n\r\n\r\n// const postsDirectory = path.join(process.cwd(), 'posts')\r\n\r\n\r\nexport   function getSortedPostsData() {\r\n\r\n\r\n//     const res = await fetch('https://simple-blog-api.crew.red/posts')\r\n//     const posts = await res.json()\r\n//     return (   posts.map(post => {\r\n//       return {\r\n         \r\n//         params: {\r\n//           id: post.id.toString(),\r\n//           title:post.title.toString(),\r\n//           body:post.body.toString()\r\n//         }\r\n//       }\r\n//     }))\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n//   Get file names under /posts\r\n  const fileNames = fs.readdirSync(postsDirectory)\r\n  const allPostsData = fileNames.map(fileName => {\r\n    // Remove \".md\" from file name to get id\r\n    const id = fileName.replace(/\\.md$/, '')\r\n\r\n    // Read markdown file as string\r\n    const fullPath = path.join(postsDirectory, fileName)\r\n    const fileContents = fs.readFileSync(fullPath, 'utf8')\r\n\r\n    // Use gray-matter to parse the post metadata section\r\n    const matterResult = matter(fileContents)\r\n\r\n    // Combine the data with the id\r\n  \r\n    return {\r\n      id,\r\n      ...matterResult.data\r\n    }\r\n  })\r\n//   Sort posts by date\r\n  return allPostsData.sort((a, b) => {\r\n    if (a.date < b.date) {\r\n      return 1\r\n    } else {\r\n      return -1\r\n    }\r\n  })\r\n}\r\n// export function getAllPostIds() {\r\n//     const fileNames = fs.readdirSync(postsDirectory)\r\n  \r\n\r\n//     return fileNames.map(fileName => {\r\n//       return {\r\n//         params: {\r\n//           id: fileName.replace(/\\.md$/, '')\r\n//         }\r\n//       }\r\n//     })\r\n//   }\r\n\r\n  export async function getAllPostIds() {\r\n    // Instead of the file system,\r\n    // fetch post data from an external API endpoint\r\n    const res = await fetch('https://simple-blog-api.crew.red/posts')\r\n    const posts = await res.json()\r\n    return (   posts.map(post => {\r\n      return {\r\n         \r\n        params: {\r\n          id: post.id.toString()\r\n        }\r\n      }\r\n    }))\r\n  }\r\n\r\n\r\n\r\nexport async function getPostData(id) {\r\n    const res = await fetch('https://simple-blog-api.crew.red/posts')\r\n    const posts = await res.json()\r\n    return (  console.log('post', posts), posts.map(post => {\r\n      return {\r\n         \r\n        params: {\r\n          id: post.id.toString(),\r\n          ...post\r\n        }\r\n      }\r\n    }))\r\n}\r\n\r\n//   const fullPath = path.join(postsDirectory, `${id}.md`)\r\n//   const fileContents = fs.readFileSync(fullPath, 'utf8')\r\n\r\n//   // Use gray-matter to parse the post metadata section\r\n//   const matterResult = matter(fileContents)\r\n\r\n//   // Use remark to convert markdown into HTML string\r\n//   const processedContent = await remark()\r\n//     .use(html)\r\n//     .process(matterResult.content)\r\n//   const contentHtml = processedContent.toString()\r\n\r\n\r\n//   return {\r\n//     id,\r\n//     contentHtml,\r\n//     ...matterResult.data\r\n//   }\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}
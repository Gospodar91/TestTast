{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nimport remark from 'remark';\nimport html from 'remark-html';\nimport axios from 'axios'; // const postsDirectory = path.join(process.cwd(), 'posts')\n\nexport async function getSortedPostsData() {\n  try {\n    const posts = await axios.get('https://simple-blog-api.crew.red/posts');\n    return posts.data.map(post => {\n      return {\n        params: _objectSpread({\n          id: post.id.toString()\n        }, post)\n      };\n    });\n  } catch (error) {\n    console.log(\"ERRROR--------------------------------->\", error);\n    ;\n    throw new Error();\n  }\n} // //   Get file names under /posts\n//   const fileNames = fs.readdirSync(postsDirectory)\n//   const allPostsData = fileNames.map(fileName => {\n//     // Remove \".md\" from file name to get id\n//     const id = fileName.replace(/\\.md$/, '')\n//     // Read markdown file as string\n//     const fullPath = path.join(postsDirectory, fileName)\n//     const fileContents = fs.readFileSync(fullPath, 'utf8')\n//     // Use gray-matter to parse the post metadata section\n//     const matterResult = matter(fileContents)\n//     // Combine the data with the id\n//     return {\n//       id,\n//       ...matterResult.data\n//     }\n//   })\n// //   Sort posts by date\n//   return allPostsData.sort((a, b) => {\n//     if (a.date < b.date) {\n//       return 1\n//     } else {\n//       return -1\n//     }\n//   })\n// }\n// export function getAllPostIds() {\n//     const fileNames = fs.readdirSync(postsDirectory)\n//     return fileNames.map(fileName => {\n//       return {\n//         params: {\n//           id: fileName.replace(/\\.md$/, '')\n//         }\n//       }\n//     })\n//   }\n\nexport async function getAllPostIds() {\n  // Instead of the file system,\n  // fetch post data from an external API endpoint\n  try {\n    const posts = await axios.get('https://simple-blog-api.crew.red/posts/2?_embed=comments'); // console.log('postsFIND--------------------------------------------------', posts.data)\n\n    const keys = Object.values(posts.data);\n    return console.log('values-----------------------------------!!!!!!!!!!!!!!!!', keys) // return {\n    //   params: {\n    //     id: post.id.toString(),\n    //     ...post\n    //   }\n    //   }\n    // }\n    ;\n  } catch (error) {\n    console.log(\"ERRROR--------------------------------->\", error);\n    ;\n    throw new Error();\n  }\n}\nexport async function getPostData(params) {\n  console.log('params', params);\n  const res = params.find(elem => elem.id === params.id);\n  console.log('RES_______________----------------------------------->', res);\n  return _objectSpread({\n    id\n  }, res);\n} // \n//   const fullPath = path.join(postsDirectory, `${id}.md`)\n//   const fileContents = fs.readFileSync(fullPath, 'utf8')\n//   // Use gray-matter to parse the post metadata section\n//   const matterResult = matter(fileContents)\n//   // Use remark to convert markdown into HTML string\n//   const processedContent = await remark()\n//     .use(html)\n//     .process(matterResult.content)\n//   const contentHtml = processedContent.toString()\n//   return {\n//     id,\n//     contentHtml,\n//     ...matterResult.data\n//   }\n// }","map":{"version":3,"sources":["E:/TestTaskNextJs/testDevOps/TestTast/nextjs-blog/lib/posts.js"],"names":["fs","path","matter","remark","html","axios","getSortedPostsData","posts","get","data","map","post","params","id","toString","error","console","log","Error","getAllPostIds","keys","Object","values","getPostData","res","find","elem"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAIA;;AAGA,OAAQ,eAAeC,kBAAf,GAAoC;AAG1C,MAAI;AACF,UAAMC,KAAK,GAAG,MAAMF,KAAK,CAACG,GAAN,CAAU,wCAAV,CAApB;AACA,WAAWD,KAAK,CAACE,IAAN,CAAWC,GAAX,CAAeC,IAAI,IAAI;AAChC,aAAO;AAELC,QAAAA,MAAM;AACJC,UAAAA,EAAE,EAAEF,IAAI,CAACE,EAAL,CAAQC,QAAR;AADA,WAEDH,IAFC;AAFD,OAAP;AAOD,KARU,CAAX;AAUD,GAZD,CAaF,OAAOI,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAY,0CAAZ,EAAwDF,KAAxD;AACF;AACE,UAAM,IAAIG,KAAJ,EAAN;AACD;AACA,C,CAMD;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE,OAAO,eAAeC,aAAf,GAA+B;AACpC;AACA;AACA,MAAI;AACJ,UAAMZ,KAAK,GAAG,MAAMF,KAAK,CAACG,GAAN,CAAU,0DAAV,CAApB,CADI,CAEJ;;AACA,UAAMY,IAAI,GAACC,MAAM,CAACC,MAAP,CAAcf,KAAK,CAACE,IAApB,CAAX;AACA,WACEO,OAAO,CAACC,GAAR,CAAY,2DAAZ,EAAyEG,IAAzE,CADF,CAOE;AAEA;AACA;AACA;AACA;AACF;AACA;AAdA;AAgBD,GApBC,CAqBJ,OAAOL,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAY,0CAAZ,EAAwDF,KAAxD;AACF;AACE,UAAM,IAAIG,KAAJ,EAAN;AACD;AACA;AAMD,OAAO,eAAeK,WAAf,CAA2BX,MAA3B,EAAmC;AACxCI,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBL,MAAtB;AACF,QAAMY,GAAG,GAACZ,MAAM,CAACa,IAAP,CAAYC,IAAI,IAAEA,IAAI,CAACb,EAAL,KAAUD,MAAM,CAACC,EAAnC,CAAV;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,wDAAZ,EAAsEO,GAAtE;AACI;AACIX,IAAAA;AADJ,KAEOW,GAFP;AAKC,C,CACL;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import fs from 'fs'\r\nimport path from 'path'\r\nimport matter from 'gray-matter'\r\nimport remark from 'remark'\r\nimport html from 'remark-html'\r\nimport axios from 'axios'\r\n\r\n\r\n\r\n// const postsDirectory = path.join(process.cwd(), 'posts')\r\n\r\n\r\nexport  async function getSortedPostsData() {\r\n\r\n\r\n  try {\r\n    const posts = await axios.get('https://simple-blog-api.crew.red/posts')\r\n    return (   posts.data.map(post => {\r\n      return {\r\n         \r\n        params: {\r\n          id: post.id.toString(),\r\n          ...post\r\n        }\r\n      }\r\n    }\r\n    ))\r\n  }\r\ncatch (error) {\r\n  console.log(\"ERRROR--------------------------------->\", error);\r\n;\r\n  throw new Error();\r\n}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// //   Get file names under /posts\r\n//   const fileNames = fs.readdirSync(postsDirectory)\r\n//   const allPostsData = fileNames.map(fileName => {\r\n//     // Remove \".md\" from file name to get id\r\n//     const id = fileName.replace(/\\.md$/, '')\r\n\r\n//     // Read markdown file as string\r\n//     const fullPath = path.join(postsDirectory, fileName)\r\n//     const fileContents = fs.readFileSync(fullPath, 'utf8')\r\n\r\n//     // Use gray-matter to parse the post metadata section\r\n//     const matterResult = matter(fileContents)\r\n\r\n//     // Combine the data with the id\r\n  \r\n//     return {\r\n//       id,\r\n//       ...matterResult.data\r\n//     }\r\n//   })\r\n// //   Sort posts by date\r\n//   return allPostsData.sort((a, b) => {\r\n//     if (a.date < b.date) {\r\n//       return 1\r\n//     } else {\r\n//       return -1\r\n//     }\r\n//   })\r\n// }\r\n// export function getAllPostIds() {\r\n//     const fileNames = fs.readdirSync(postsDirectory)\r\n  \r\n\r\n//     return fileNames.map(fileName => {\r\n//       return {\r\n//         params: {\r\n//           id: fileName.replace(/\\.md$/, '')\r\n//         }\r\n//       }\r\n//     })\r\n//   }\r\n\r\n  export async function getAllPostIds() {\r\n    // Instead of the file system,\r\n    // fetch post data from an external API endpoint\r\n    try {\r\n    const posts = await axios.get('https://simple-blog-api.crew.red/posts/2?_embed=comments')\r\n    // console.log('postsFIND--------------------------------------------------', posts.data)\r\n    const keys=Object.values(posts.data)\r\n    return (  \r\n      console.log('values-----------------------------------!!!!!!!!!!!!!!!!', keys)\r\n   \r\n\r\n\r\n      \r\n      \r\n      // return {\r\n         \r\n      //   params: {\r\n      //     id: post.id.toString(),\r\n      //     ...post\r\n      //   }\r\n    //   }\r\n    // }\r\n    )\r\n  }\r\ncatch (error) {\r\n  console.log(\"ERRROR--------------------------------->\", error);\r\n;\r\n  throw new Error();\r\n}\r\n}\r\n  \r\n  \r\n\r\n\r\n\r\nexport async function getPostData(params) {\r\n  console.log('params', params)\r\nconst res=params.find(elem=>elem.id===params.id)\r\nconsole.log('RES_______________----------------------------------->', res)\r\n    return {\r\n        id,\r\n        ...res\r\n     \r\n      }\r\n    }\r\n// \r\n\r\n//   const fullPath = path.join(postsDirectory, `${id}.md`)\r\n//   const fileContents = fs.readFileSync(fullPath, 'utf8')\r\n\r\n//   // Use gray-matter to parse the post metadata section\r\n//   const matterResult = matter(fileContents)\r\n\r\n//   // Use remark to convert markdown into HTML string\r\n//   const processedContent = await remark()\r\n//     .use(html)\r\n//     .process(matterResult.content)\r\n//   const contentHtml = processedContent.toString()\r\n\r\n\r\n//   return {\r\n//     id,\r\n//     contentHtml,\r\n//     ...matterResult.data\r\n//   }\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios';\nexport async function getSortedPostsData() {\n  try {\n    const posts = await axios.get('https://simple-blog-api.crew.red/posts');\n    return posts.data.map(post => {\n      return {\n        params: _objectSpread({\n          id: post.id.toString()\n        }, post)\n      };\n    });\n  } catch (error) {\n    console.log(\"ERRROR--------------------------------->\", error);\n    ;\n    throw new Error();\n  }\n}\nexport async function getAllPostIds() {\n  try {\n    const posts = await axios.get('https://simple-blog-api.crew.red/posts/2?_embed=comments'); // console.log('postsFIND--------------------------------------------------', posts.data)\n\n    console.log('posts.data----------------------->', posts.data.id);\n    return Object.entries(posts.data);\n  } catch (error) {\n    console.log(\"ERRROR--------------------------------->\", error);\n    ;\n    throw new Error();\n  }\n}\nexport async function getPostData(params) {\n  console.log('params------------------------------->', params); // const res=params.find(elem=>elem.id===params.id)\n\n  console.log('RES_______________----------------------------------->');\n  return {\n    params\n  };\n} // \n//   const fullPath = path.join(postsDirectory, `${id}.md`)\n//   const fileContents = fs.readFileSync(fullPath, 'utf8')\n//   // Use gray-matter to parse the post metadata section\n//   const matterResult = matter(fileContents)\n//   // Use remark to convert markdown into HTML string\n//   const processedContent = await remark()\n//     .use(html)\n//     .process(matterResult.content)\n//   const contentHtml = processedContent.toString()\n//   return {\n//     id,\n//     contentHtml,\n//     ...matterResult.data\n//   }\n// }","map":{"version":3,"sources":["E:/TestTaskNextJs/testDevOps/TestTast/nextjs-blog/lib/posts.js"],"names":["axios","getSortedPostsData","posts","get","data","map","post","params","id","toString","error","console","log","Error","getAllPostIds","Object","entries","getPostData"],"mappings":";;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AAIA,OAAQ,eAAeC,kBAAf,GAAoC;AAG1C,MAAI;AACF,UAAMC,KAAK,GAAG,MAAMF,KAAK,CAACG,GAAN,CAAU,wCAAV,CAApB;AACA,WAAWD,KAAK,CAACE,IAAN,CAAWC,GAAX,CAAeC,IAAI,IAAI;AAChC,aAAO;AAELC,QAAAA,MAAM;AACJC,UAAAA,EAAE,EAAEF,IAAI,CAACE,EAAL,CAAQC,QAAR;AADA,WAEDH,IAFC;AAFD,OAAP;AAOD,KARU,CAAX;AAUD,GAZD,CAaF,OAAOI,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAY,0CAAZ,EAAwDF,KAAxD;AACF;AACE,UAAM,IAAIG,KAAJ,EAAN;AACD;AACA;AAGC,OAAO,eAAeC,aAAf,GAA+B;AACpC,MAAI;AACJ,UAAMZ,KAAK,GAAG,MAAMF,KAAK,CAACG,GAAN,CAAU,0DAAV,CAApB,CADI,CAEJ;;AACFQ,IAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ,EAAkDV,KAAK,CAACE,IAAN,CAAWI,EAA7D;AACA,WAAUO,MAAM,CAACC,OAAP,CAAed,KAAK,CAACE,IAArB,CAAV;AAEC,GANC,CAOJ,OAAOM,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAY,0CAAZ,EAAwDF,KAAxD;AACF;AACE,UAAM,IAAIG,KAAJ,EAAN;AACD;AACA;AAGD,OAAO,eAAeI,WAAf,CAA2BV,MAA3B,EAAmC;AACxCI,EAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ,EAAsDL,MAAtD,EADwC,CAE1C;;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAY,wDAAZ;AACI,SAAO;AACJL,IAAAA;AADI,GAAP;AAIC,C,CACL;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["\r\nimport axios from 'axios'\r\n\r\n\r\n\r\nexport  async function getSortedPostsData() {\r\n\r\n\r\n  try {\r\n    const posts = await axios.get('https://simple-blog-api.crew.red/posts')\r\n    return (   posts.data.map(post => {\r\n      return {\r\n         \r\n        params: {\r\n          id: post.id.toString(),\r\n          ...post\r\n        }\r\n      }\r\n    }\r\n    ))\r\n  }\r\ncatch (error) {\r\n  console.log(\"ERRROR--------------------------------->\", error);\r\n;\r\n  throw new Error();\r\n}\r\n}\r\n\r\n\r\n  export async function getAllPostIds() {\r\n    try {\r\n    const posts = await axios.get('https://simple-blog-api.crew.red/posts/2?_embed=comments')\r\n    // console.log('postsFIND--------------------------------------------------', posts.data)\r\n  console.log('posts.data----------------------->', posts.data.id)\r\n  return (  Object.entries(posts.data)\r\n  )\r\n  }\r\ncatch (error) {\r\n  console.log(\"ERRROR--------------------------------->\", error);\r\n;\r\n  throw new Error();\r\n}\r\n}\r\n  \r\n\r\nexport async function getPostData(params) {\r\n  console.log('params------------------------------->', params)\r\n// const res=params.find(elem=>elem.id===params.id)\r\nconsole.log('RES_______________----------------------------------->',)\r\n    return {\r\n       params\r\n     \r\n      }\r\n    }\r\n// \r\n\r\n//   const fullPath = path.join(postsDirectory, `${id}.md`)\r\n//   const fileContents = fs.readFileSync(fullPath, 'utf8')\r\n\r\n//   // Use gray-matter to parse the post metadata section\r\n//   const matterResult = matter(fileContents)\r\n\r\n//   // Use remark to convert markdown into HTML string\r\n//   const processedContent = await remark()\r\n//     .use(html)\r\n//     .process(matterResult.content)\r\n//   const contentHtml = processedContent.toString()\r\n\r\n\r\n//   return {\r\n//     id,\r\n//     contentHtml,\r\n//     ...matterResult.data\r\n//   }\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}
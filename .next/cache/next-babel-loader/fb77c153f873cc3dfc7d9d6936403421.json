{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nimport axios from \"axios\";\nconst postsDirectory = path.join(process.cwd(), 'posts');\nexport function getSortedPostsData() {\n  // Get file names under /posts\n  const fileNames = fs.readdirSync(postsDirectory);\n  const allPostsData = fileNames.map(fileName => {\n    // Remove \".md\" from file name to get id\n    const id = fileName.replace(/\\.md$/, ''); // Read markdown file as string\n\n    const fullPath = path.join(postsDirectory, fileName);\n    const fileContents = fs.readFileSync(fullPath, 'utf8'); // Use gray-matter to parse the post metadata section\n\n    const matterResult = matter(fileContents); // Combine the data with the id\n\n    return _objectSpread({\n      id\n    }, matterResult.data);\n  }); // Sort posts by date\n\n  return allPostsData.sort((a, b) => {\n    if (a.date < b.date) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n}\nexport async function getAllPosts() {\n  try {\n    const data = await axios.get(`https://simple-blog-api.crew.red/posts`);\n    console.log('data', data);\n    return data;\n  } catch (error) {\n    console.log(\"GetSummaryError\", error);\n    PNotify.error({\n      title: \"Sorry:\",\n      text: \"Server is overloaded\"\n    });\n    throw new Error();\n  }\n}","map":{"version":3,"sources":["E:/TestTaskNextJs/testDevOps/TestTast/nextjs-blog/lib/posts.js"],"names":["fs","path","matter","axios","postsDirectory","join","process","cwd","getSortedPostsData","fileNames","readdirSync","allPostsData","map","fileName","id","replace","fullPath","fileContents","readFileSync","matterResult","data","sort","a","b","date","getAllPosts","get","console","log","error","PNotify","title","text","Error"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,MAAMC,cAAc,GAAGH,IAAI,CAACI,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,OAAzB,CAAvB;AAGA,OAAO,SAASC,kBAAT,GAA8B;AACnC;AACA,QAAMC,SAAS,GAAGT,EAAE,CAACU,WAAH,CAAeN,cAAf,CAAlB;AACA,QAAMO,YAAY,GAAGF,SAAS,CAACG,GAAV,CAAcC,QAAQ,IAAI;AAC7C;AACA,UAAMC,EAAE,GAAGD,QAAQ,CAACE,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAAX,CAF6C,CAI7C;;AACA,UAAMC,QAAQ,GAAGf,IAAI,CAACI,IAAL,CAAUD,cAAV,EAA0BS,QAA1B,CAAjB;AACA,UAAMI,YAAY,GAAGjB,EAAE,CAACkB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB,CAN6C,CAQ7C;;AACA,UAAMG,YAAY,GAAGjB,MAAM,CAACe,YAAD,CAA3B,CAT6C,CAW7C;;AACA;AACEH,MAAAA;AADF,OAEKK,YAAY,CAACC,IAFlB;AAID,GAhBoB,CAArB,CAHmC,CAoBnC;;AACA,SAAOT,YAAY,CAACU,IAAb,CAAkB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACjC,QAAID,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAf,EAAqB;AACnB,aAAO,CAAP;AACD,KAFD,MAEO;AACL,aAAO,CAAC,CAAR;AACD;AACF,GANM,CAAP;AAOD;AAED,OAAO,eAAeC,WAAf,GAA6B;AAC9B,MAAI;AACF,UAAML,IAAI,GAAG,MAAMjB,KAAK,CAACuB,GAAN,CAAW,wCAAX,CAAnB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBR,IAApB;AACA,WAAOA,IAAP;AACD,GAJD,CAIE,OAAOS,KAAP,EAAc;AACdF,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BC,KAA/B;AACAC,IAAAA,OAAO,CAACD,KAAR,CAAc;AACZE,MAAAA,KAAK,EAAE,QADK;AAEZC,MAAAA,IAAI,EAAE;AAFM,KAAd;AAIA,UAAM,IAAIC,KAAJ,EAAN;AACD;AACF","sourcesContent":["import fs from 'fs'\r\nimport path from 'path'\r\nimport matter from 'gray-matter'\r\nimport axios from \"axios\";\r\n\r\n\r\nconst postsDirectory = path.join(process.cwd(), 'posts')\r\n\r\n\r\nexport function getSortedPostsData() {\r\n  // Get file names under /posts\r\n  const fileNames = fs.readdirSync(postsDirectory)\r\n  const allPostsData = fileNames.map(fileName => {\r\n    // Remove \".md\" from file name to get id\r\n    const id = fileName.replace(/\\.md$/, '')\r\n\r\n    // Read markdown file as string\r\n    const fullPath = path.join(postsDirectory, fileName)\r\n    const fileContents = fs.readFileSync(fullPath, 'utf8')\r\n\r\n    // Use gray-matter to parse the post metadata section\r\n    const matterResult = matter(fileContents)\r\n\r\n    // Combine the data with the id\r\n    return {\r\n      id,\r\n      ...matterResult.data\r\n    }\r\n  })\r\n  // Sort posts by date\r\n  return allPostsData.sort((a, b) => {\r\n    if (a.date < b.date) {\r\n      return 1\r\n    } else {\r\n      return -1\r\n    }\r\n  })\r\n}\r\n\r\nexport async function getAllPosts() {\r\n      try {\r\n        const data = await axios.get(`https://simple-blog-api.crew.red/posts`);\r\n        console.log('data', data)\r\n        return data;\r\n      } catch (error) {\r\n        console.log(\"GetSummaryError\", error);\r\n        PNotify.error({\r\n          title: \"Sorry:\",\r\n          text: \"Server is overloaded\",\r\n        });\r\n        throw new Error();\r\n      }\r\n    }"]},"metadata":{},"sourceType":"module"}
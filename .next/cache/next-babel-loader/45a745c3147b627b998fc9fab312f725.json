{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios';\nconst data = [{\n  title: 'Why do we use it?',\n  body: \"It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).\\n\" + \"It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy.\",\n  id: 2\n}, {\n  title: 'Where does it come from?',\n  body: 'Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \"Lorem ipsum dolor sit amet..\", comes from a line in section 1.10.32.',\n  id: 3\n}, {\n  title: 'Why do we use it?',\n  body: \"It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose.'Content here, content here', making it look like readable English. Many\",\n  id: 4\n}]; // const postsDirectory = path.join(process.cwd(), 'posts')\n\nexport async function getSortedPostsData() {\n  try {\n    const posts = await axios.get('https://simple-blog-api.crew.red/posts');\n    return posts.data.map(post => {\n      return {\n        params: _objectSpread({\n          id: post.id.toString()\n        }, post)\n      };\n    });\n  } catch (error) {\n    console.log(\"ERRROR--------------------------------->\", error);\n    ;\n    throw new Error();\n  }\n} // //   Get file names under /posts\n//   const fileNames = fs.readdirSync(postsDirectory)\n//   const allPostsData = fileNames.map(fileName => {\n//     // Remove \".md\" from file name to get id\n//     const id = fileName.replace(/\\.md$/, '')\n//     // Read markdown file as string\n//     const fullPath = path.join(postsDirectory, fileName)\n//     const fileContents = fs.readFileSync(fullPath, 'utf8')\n//     // Use gray-matter to parse the post metadata section\n//     const matterResult = matter(fileContents)\n//     // Combine the data with the id\n//     return {\n//       id,\n//       ...matterResult.data\n//     }\n//   })\n// //   Sort posts by date\n//   return allPostsData.sort((a, b) => {\n//     if (a.date < b.date) {\n//       return 1\n//     } else {\n//       return -1\n//     }\n//   })\n// }\n// export function getAllPostIds() {\n//     const fileNames = fs.readdirSync(postsDirectory)\n//     return fileNames.map(fileName => {\n//       return {\n//         params: {\n//           id: fileName.replace(/\\.md$/, '')\n//         }\n//       }\n//     })\n//   }\n\nconst id = [2, 3, 4, 5];\nexport async function getAllPostIds(id) {\n  // Instead of the file system,\n  // fetch post data from an external API endpoint\n  try {\n    // const posts = await axios.get('https://simple-blog-api.crew.red/posts')\n    // return (   posts.data.map(post => {\n    return id.map(post => {\n      return {\n        params: {\n          id: post.id.toString() // ...post\n\n        }\n      };\n    });\n  } catch (error) {\n    console.log(\"ERRROR--------------------------------->\", error);\n    ;\n    throw new Error();\n  }\n}\nexport async function getPostData(id, data) {\n  console.log('DATA============================>', data);\n  const res = data.find(elem => elem.id === params.id);\n  console.log('RES_______________----------------------------------->', res);\n  return _objectSpread({\n    id\n  }, res);\n} // \n//   const fullPath = path.join(postsDirectory, `${id}.md`)\n//   const fileContents = fs.readFileSync(fullPath, 'utf8')\n//   // Use gray-matter to parse the post metadata section\n//   const matterResult = matter(fileContents)\n//   // Use remark to convert markdown into HTML string\n//   const processedContent = await remark()\n//     .use(html)\n//     .process(matterResult.content)\n//   const contentHtml = processedContent.toString()\n//   return {\n//     id,\n//     contentHtml,\n//     ...matterResult.data\n//   }\n// }","map":{"version":3,"sources":["E:/TestTaskNextJs/testDevOps/TestTast/nextjs-blog/lib/posts.js"],"names":["axios","data","title","body","id","getSortedPostsData","posts","get","map","post","params","toString","error","console","log","Error","getAllPostIds","getPostData","res","find","elem"],"mappings":";;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,MAAMC,IAAI,GAAE,CACV;AACEC,EAAAA,KAAK,EAAE,mBADT;AAEEC,EAAAA,IAAI,EAAE,4mBACJ,6eAHJ;AAKEC,EAAAA,EAAE,EAAE;AALN,CADU,EAQV;AACEF,EAAAA,KAAK,EAAE,0BADT;AAEEC,EAAAA,IAAI,EAAE,ylBAFR;AAGEC,EAAAA,EAAE,EAAE;AAHN,CARU,EAaV;AACEF,EAAAA,KAAK,EAAE,mBADT;AAEEC,EAAAA,IAAI,EAAE,gpBAFR;AAGEC,EAAAA,EAAE,EAAE;AAHN,CAbU,CAAZ,C,CA4BA;;AAGA,OAAQ,eAAeC,kBAAf,GAAoC;AAG1C,MAAI;AACF,UAAMC,KAAK,GAAG,MAAMN,KAAK,CAACO,GAAN,CAAU,wCAAV,CAApB;AAEA,WAAWD,KAAK,CAACL,IAAN,CAAWO,GAAX,CAAeC,IAAI,IAAI;AAChC,aAAO;AAELC,QAAAA,MAAM;AACJN,UAAAA,EAAE,EAAEK,IAAI,CAACL,EAAL,CAAQO,QAAR;AADA,WAEDF,IAFC;AAFD,OAAP;AAOD,KARU,CAAX;AAUD,GAbD,CAcF,OAAOG,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAY,0CAAZ,EAAwDF,KAAxD;AACF;AACE,UAAM,IAAIG,KAAJ,EAAN;AACD;AACA,C,CAMD;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMX,EAAE,GAAC,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,CAAT;AACE,OAAO,eAAeY,aAAf,CAA6BZ,EAA7B,EAAiC;AACtC;AACA;AACA,MAAI;AACJ;AACA;AACA,WAAWA,EAAE,CAACI,GAAH,CAAOC,IAAI,IAAI;AACxB,aAAO;AAELC,QAAAA,MAAM,EAAE;AACNN,UAAAA,EAAE,EAAEK,IAAI,CAACL,EAAL,CAAQO,QAAR,EADE,CAEN;;AAFM;AAFH,OAAP;AAOD,KARU,CAAX;AAUD,GAbC,CAcJ,OAAOC,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAY,0CAAZ,EAAwDF,KAAxD;AACF;AACE,UAAM,IAAIG,KAAJ,EAAN;AACD;AACA;AAMD,OAAO,eAAeE,WAAf,CAA2Bb,EAA3B,EAA8BH,IAA9B,EAAoC;AACzCY,EAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ,EAAgDb,IAAhD;AACF,QAAMiB,GAAG,GAACjB,IAAI,CAACkB,IAAL,CAAUC,IAAI,IAAEA,IAAI,CAAChB,EAAL,KAAUM,MAAM,CAACN,EAAjC,CAAV;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAY,wDAAZ,EAAsEI,GAAtE;AACI;AACId,IAAAA;AADJ,KAEOc,GAFP;AAKC,C,CACL;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["\r\nimport axios from 'axios'\r\n\r\n\r\nconst data= [\r\n  {\r\n    title: 'Why do we use it?',\r\n    body: \"It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).\\n\" +\r\n      \"It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy.\"\r\n,\r\n    id: 2\r\n  },\r\n  {\r\n    title: 'Where does it come from?',\r\n    body: 'Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \"Lorem ipsum dolor sit amet..\", comes from a line in section 1.10.32.',\r\n    id: 3\r\n  },\r\n  {\r\n    title: 'Why do we use it?',\r\n    body: \"It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose.'Content here, content here', making it look like readable English. Many\",\r\n    id: 4\r\n  },\r\n \r\n]\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// const postsDirectory = path.join(process.cwd(), 'posts')\r\n\r\n\r\nexport  async function getSortedPostsData() {\r\n\r\n\r\n  try {\r\n    const posts = await axios.get('https://simple-blog-api.crew.red/posts')\r\n\r\n    return (   posts.data.map(post => {\r\n      return {\r\n         \r\n        params: {\r\n          id: post.id.toString(),\r\n          ...post\r\n        }\r\n      }\r\n    }\r\n    ))\r\n  }\r\ncatch (error) {\r\n  console.log(\"ERRROR--------------------------------->\", error);\r\n;\r\n  throw new Error();\r\n}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// //   Get file names under /posts\r\n//   const fileNames = fs.readdirSync(postsDirectory)\r\n//   const allPostsData = fileNames.map(fileName => {\r\n//     // Remove \".md\" from file name to get id\r\n//     const id = fileName.replace(/\\.md$/, '')\r\n\r\n//     // Read markdown file as string\r\n//     const fullPath = path.join(postsDirectory, fileName)\r\n//     const fileContents = fs.readFileSync(fullPath, 'utf8')\r\n\r\n//     // Use gray-matter to parse the post metadata section\r\n//     const matterResult = matter(fileContents)\r\n\r\n//     // Combine the data with the id\r\n  \r\n//     return {\r\n//       id,\r\n//       ...matterResult.data\r\n//     }\r\n//   })\r\n// //   Sort posts by date\r\n//   return allPostsData.sort((a, b) => {\r\n//     if (a.date < b.date) {\r\n//       return 1\r\n//     } else {\r\n//       return -1\r\n//     }\r\n//   })\r\n// }\r\n// export function getAllPostIds() {\r\n//     const fileNames = fs.readdirSync(postsDirectory)\r\n  \r\n\r\n//     return fileNames.map(fileName => {\r\n//       return {\r\n//         params: {\r\n//           id: fileName.replace(/\\.md$/, '')\r\n//         }\r\n//       }\r\n//     })\r\n//   }\r\nconst id=[2,3,4,5]\r\n  export async function getAllPostIds(id) {\r\n    // Instead of the file system,\r\n    // fetch post data from an external API endpoint\r\n    try {\r\n    // const posts = await axios.get('https://simple-blog-api.crew.red/posts')\r\n    // return (   posts.data.map(post => {\r\n    return (   id.map(post => {\r\n      return {\r\n         \r\n        params: {\r\n          id: post.id.toString(),\r\n          // ...post\r\n        }\r\n      }\r\n    }\r\n    ))\r\n  }\r\ncatch (error) {\r\n  console.log(\"ERRROR--------------------------------->\", error);\r\n;\r\n  throw new Error();\r\n}\r\n}\r\n  \r\n  \r\n\r\n\r\n\r\nexport async function getPostData(id,data) {\r\n  console.log('DATA============================>',data)\r\nconst res=data.find(elem=>elem.id===params.id)\r\nconsole.log('RES_______________----------------------------------->', res)\r\n    return {\r\n        id,\r\n        ...res\r\n     \r\n      }\r\n    }\r\n// \r\n\r\n//   const fullPath = path.join(postsDirectory, `${id}.md`)\r\n//   const fileContents = fs.readFileSync(fullPath, 'utf8')\r\n\r\n//   // Use gray-matter to parse the post metadata section\r\n//   const matterResult = matter(fileContents)\r\n\r\n//   // Use remark to convert markdown into HTML string\r\n//   const processedContent = await remark()\r\n//     .use(html)\r\n//     .process(matterResult.content)\r\n//   const contentHtml = processedContent.toString()\r\n\r\n\r\n//   return {\r\n//     id,\r\n//     contentHtml,\r\n//     ...matterResult.data\r\n//   }\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}